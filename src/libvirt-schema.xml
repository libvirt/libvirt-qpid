<schema package="com.redhat.libvirt">

  <!-- This is an object model of the libvirt API.
       access: Access mode: RC = Read/Create, RO = read only, RW = read/write.
       dir: Direction of argument: I = in, O = out, IO = in/out.
  -->

  <!-- In libvirt this is really the 'Connect' class, I may end up changing it.. -->

  <class name="Node">
    <property name="hostname" type="sstr" access="RC" desc="Host name" index="y"/>
    <property name="uri" type="sstr" access="RC" desc="URI of libvirt"/>
    <property name="libvirtVersion" type="sstr" access="RC" desc="Version of libvirt on the managed node"/>
    <property name="apiVersion" type="sstr" access="RC" desc="Version of libvirt API on the managed node"/>
    <property name="hypervisorVersion" type="sstr" access="RC" desc="Hypervisor Version"/>
    <property name="hypervisorType" type="sstr" access="RC" desc="Hypervisor type"/>

    <property name="model" type="sstr" access="RC" desc="CPU Model"/>
    <property name="memory" type="uint64" access="RC" desc="Host memory"/>
    <property name="cpus" type="uint32" access="RC" desc="Number of CPUS"/>
    <property name="mhz" type="uint32" access="RC" desc="MHz of CPUs"/>
    <property name="nodes" type="uint32" access="RC" desc="Number of NUMA cells."/>
    <property name="sockets" type="uint32" access="RC" desc="Number of CPU Sockets per node"/>
    <property name="cores" type="uint32" access="RC" desc="Number of cores per socket"/>
    <property name="threads" type="uint32" access="RC" desc="Number of threads per core"/>

    <method name="domainDefineXML" desc="Define a new domain, but does not start it.">
      <arg name="xmlDesc" dir="I" type="lstr" desc="XML domain description"/>

      <arg name="domain" dir="O" type="objId" desc="Newly created domain object"/>
    </method>

    <method name="storagePoolDefineXML"
     desc="Define a new inactive storage pool based on its XML description. The pool is persistent, until explicitly undefined.">
      <arg name="xmlDesc" type="lstr" desc="XML Description of the storage pool"/>

      <arg name="pool" dir="O" type="objId" desc="Newly created storage pool"/>
    </method>

    <method name="findStoragePoolSources"
     desc="Talks to a storage backend and attempts to auto-discover the set of available storage pool sources.">
      <arg name="type" type="lstr" desc="Type of storage pool sources to discover."/>
      <arg name="srcSpec" type="lstr" desc="XML document specifying discovery source"/>

      <arg name="xmlDesc" dir="O" type="lstr"
       desc="XML document consisting of a SourceList element containing a source document appropriate to the given pool type for each discovered source."/>
    </method>

    <method name="storagePoolCreateXML"
     desc="Create a new storage based on its XML description. The pool is not persistent, so its definition will disappear when it is destroyed, or if the host is restarted">
      <arg name="xmlDesc" type="lstr" desc="XML Description of the storage pool"/>

      <arg name="pool" dir="O" type="objId" desc="Newly created storage pool"/>
    </method>
  </class>

  <class name="Domain">
    <property name="uuid" access="RC" type="sstr" desc="Domain UUID" index="y"/>
    <property name="name" access="RC" type="sstr" desc="Domain name" index="y"/>
    <property name="id" type="int64" desc="Hypervisor Domain id, -1 if not running."/>

    <!-- Set up an association of hosts to VMs.  This will setup a domain list in the node object
         and give us a reference here to the node object. -->
    <property name="node" type="objId" references="Node" access="RC" parentRef="y" desc="Node of this VM"/>

    <statistic name="maximumMemory" type="uint64" desc="Maximum memory allowed in KB."/>
    <statistic name="memory" type="uint64" desc="Memory used in KB."/>
    <statistic name="cpuTime" type="uint64" desc="CPU time used in nanoseconds."/>
    <property name="state" type="sstr" desc="Domain state."/>
    <property name="numVcpus" type="uint32" desc="Number of virtual CPUs."/>
    <property name="active" type="sstr" desc="true/false domain active."/>

    <method name="create" desc="Start stopped VM"/>

    <method name="destroy" desc="Stop this VM"/>

    <method name="undefine" desc="Undefine the domain"/>

    <method name="suspend" desc="Suspend this VM"/>

    <method name="resume" desc="Resume suspended VM"/>

    <method name="save" desc="Save this VM">
      <arg name="filename" type="sstr" desc="Name of file to save VM image in"/>
    </method>

    <method name="restore" desc="Restore saved VM">
      <arg name="filename" type="sstr" desc="Name of file to restore from"/>
    </method>

    <method name="shutdown" desc="Shutdown a VM"/>

    <method name="reboot" desc="Reboot VM"/>

    <method name="getXMLDesc" desc="Return an XML description of the domain.">
      <arg name="description" dir="O" type="lstr" desc="XML description of the domain."/>
    </method>


    <!-- It'd be nice to be able to pass in destination node object and return the domain but
         that involves handling those objects on the agent which I'm not sure how to do at this
         time. -->
    <method name="migrate" desc="Migrate this VM to another host">
      <arg name="destinationUri" dir="I" type="sstr" desc="Destination host connection uri."/>
      <arg name="flags" dir="I" type="uint32" desc="Flags for migration, see documentation for details."/>
      <arg name="newDomainName" dir="I" type="sstr" desc="New domain name on new host if applicable."/>
      <arg name="uri" dir="I" type="sstr" desc="Destination hostname/URI as seen from host."/>
      <arg name="bandwidth" dir="I" type="uint32" desc="Maximum bandwidth to consume in Mbps."/>
    </method>
  </class>

  <class name="Pool">
    <property name="uuid" access="RC" type="sstr" desc="Pool UUID" index="y"/>
    <property name="name" access="RC" type="sstr" desc="Pool name" index="y"/>
    <property name="parentVolume" access="RC" type="sstr" desc="If this pool is an LVM pool, this will contain the parent volume path."/>

    <property name="state" type="sstr" desc="Pool state"/>
    <property name="capacity" type="uint64" desc="Pool size in bytes"/>
    <property name="allocation" type="uint64" desc="Current allocation in bytes"/>
    <property name="available" type="uint64" desc="Available space in bytes"/>

    <!-- Set up an association of hosts to storage pools.  This will setup a list of pools in the node object
         and give us a reference here to the node. -->
    <property name="node" type="objId" references="Node" access="RC" parentRef="y" desc="Node of this storage pool"/>

    <method name="getXMLDesc" desc="Return an XML description of the storage pool.">
      <arg name="description" dir="O" type="lstr" desc="XML description of the storage pool."/>
    </method>

    <method name="create" desc="Starts an inactive storage pool.">
    </method>

    <method name="build" desc="Build the underlying storage pool.">
    </method>

    <method name="destroy" desc="Destroy an active storage pool. This will deactivate the pool on the host, but keep any persistent config associated with it. If it has a persistent config it can later be restarted with a create() call">
    </method>

    <method name="delete" desc="Destroy the pool and delete its definition">
    </method>

    <method name="undefine" desc="Undefine an inactive storage pool.">
    </method>

    <method name="createVolumeXML" desc="Create a storage volume within a pool based on an XML description.  Not all pool types support volume creation.">

      <arg name="xmlDesc" type="lstr" desc="XML Description of the volume to create"/>

      <arg name="volume" dir="O" type="objId" desc="Newly created volume"/>
    </method>
    
    <method name="refresh" desc="Request that the pool refresh its list of volumes.">
    </method>

  </class>

  <class name="Volume">
    <property name="key" type="sstr" access="RC" desc="Storage volume key" index="y"/>
    <property name="path" type="sstr" access="RC" desc="Storage volume path" index="y"/>
    <property name="name" type="sstr" access="RC" desc="Storage volume name" index="y"/>
    <property name="childLVMName" type="sstr" access="RC" desc="The name of the LVM pool associated with this volume, or blank of non-existant."/>

    <property name="capacity" type="uint64" desc="Capacity of storage volume in bytes"/>
    <property name="allocation" type="uint64" desc="Current allocation in bytes"/>

    <property name="storagePool" type="objId" references="Pool" access="RC" parentRef="y"
     desc="Pool where this storage volume exists"/>

    <method name="getXMLDesc" desc="Return an XML description of the volume.">
      <arg name="description" dir="O" type="lstr" desc="XML description of the volume."/>
    </method>
    <method name="delete" desc="Delete the storage volume from the pool.">
    </method>
  </class>

</schema>

